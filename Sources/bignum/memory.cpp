/**************************************************************************************************************

    NAME
        memory.c

    DESCRIPTION
        Memory allocation functions for the bignum package.

    AUTHOR
        Christian Vigh, 09/2012.

    HISTORY
    [Version : 1.0]    [Date : 2012/09/27]     [Author : CV]
        Initial version.

 **************************************************************************************************************/

# include		"stdafx.h"
# include		"Vroom.h"
# include		"math/bignum.h"


// Pointers to memory handling functions
bni_memalloc_t *		bni_memalloc ;
bni_memrealloc_t * 		bni_memrealloc ;
bni_memfree_t *			bni_memfree ;

// Current memory manager
bni_memory_manager_t *		bni_mm_current		=  NULL ;
int				bni_mm_current_id ;


BEGIN_C_CALLING_CONVENTION

/*==============================================================================================================
 *
 *   NAME
 *	bn_set_memory_manager - Sets the current memory manager.
 *
 *   PROTOTYPE
 *	int  bn_set_memory_manager ( int  mmid ) ;
 *	int  bn_get_memory_manager ( ) ;
 *
 *   DESCRIPTION
 *	Sets the memory manager to be used. If another memory manager was in use, then its terminate() function
 *	is called to free up any allocated memory.
 *	bn_get_memory_manager returns the current memory manager id.
 *
 *   PARAMETERS
 *	int  mmid -
 *		One of the following constants :
 *		- BN_DEFAULT_MEMORY_MANAGER :
 *			Default memory manager, that relies on the malloc/realloc/free functions.
 *
 *		- BN_POOLED_MEMORY_MANAGER :
 *			A memory manager that pre-allocates a pool of data for bignums <= 1024 cells. 
 *			All memory allocations in that range will be taken from the pool until all the pool
 *			memory is full. 
 *			If the pool is full or the allocation request exceeds MAX_POOL_ALLOCATION_SIZE bytes
 *			(defined in pooldata.h, a file automatically generated by the genbnpooldata.phs script),
 *			then the standard malloc/realloc/free functions will be used.
 *
 *   RETURN VALUE
 *	Returns the previous memory manager id.
 *
 *==============================================================================================================*/
exported int fastcall	bn_set_memory_manager ( int  mmid )
   {
	int		previous_mmid		=  bni_mm_current_id ;

	switch ( mmid )
	   {
		case  BN_POOLED_MEMORY_MANAGER :
			bni_mm_set ( & bni_mm_pool ) ;
			break ;

		case  BN_DEFAULT_MEMORY_MANAGER :
			bni_mm_set ( & bni_mm_default ) ;
			break ;

		default :		// Silently ignore erroneous mmids and use the default memory manager instead
			mmid	=  BN_DEFAULT_MEMORY_MANAGER ;
			bni_mm_set ( & bni_mm_default ) ;
	    }

	bni_mm_current_id	=  mmid ;

	return ( previous_mmid ) ;
    }


exported int fastcall  bn_get_memory_manager ( )
   {
	return ( bni_mm_current_id ) ;
    }


/*==============================================================================================================

    bni_mm_set -
        Replaces the default memory handling routines by the specified ones.

  ==============================================================================================================*/
void	bni_mm_set ( bni_memory_manager_t *  manager ) 
   {
	// If a previous memory manager was installed, call its termination function
	if  ( bni_mm_current  !=  NULL )
		bni_mm_terminate ( bni_mm_current ) ;

	// Set the current memory manager
	bni_mm_current		=  manager ;

	// Set pointers to the most used functions
	bni_memalloc		=  manager -> alloc_func ;
	bni_memrealloc		=  manager -> realloc_func ;
	bni_memfree		=  manager -> free_func ;

	// Initialization function, if one has been specified for this memory manager
	bni_mm_init ( bni_mm_current ) ;
    }


/*==============================================================================================================

    bni_mm_init -
        Calls the initialization function of the specified memory manager.

  ==============================================================================================================*/
void	bni_mm_init ( bni_memory_manager_t *  manager ) 
   {
	if  ( manager  !=  NULL  &&  manager -> init_func  !=  NULL )
		manager -> init_func ( ) ;
    }


/*==============================================================================================================

    bni_mm_terminate -
        Calls the terminateialization function of the specified memory manager.

  ==============================================================================================================*/
void	bni_mm_terminate ( bni_memory_manager_t *  manager ) 
   {
	if  ( manager  !=  NULL  &&  manager -> terminate_func  !=  NULL )
		manager -> terminate_func ( ) ;
    }

	
END_C_CALLING_CONVENTION